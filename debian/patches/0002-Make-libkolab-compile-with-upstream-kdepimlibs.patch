From 34edc0a846b87570c06a5942b458adb720a34a9b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Sandro=20Knau=C3=9F?= <mail@sandroknauss.de>
Date: Tue, 10 Feb 2015 10:59:18 +0100
Subject: [PATCH] Make libkolab compile with upstream kdepimlibs

Because GENERIC tags have not entered upstream, we have to test for
support. Our integration branch not supports a feature flag to indicate
the availability of that feature.

KOLAB: #4448
---
 CMakeLists.txt              | 5 +++++
 kolabformat/kolabobject.cpp | 5 ++++-
 2 files changed, 9 insertions(+), 1 deletion(-)

--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -80,6 +80,11 @@
 add_definitions( -DKDEPIMLIBS_VERSION_MINOR=${KdepimLibs_VERSION_MINOR} )
 add_definitions( -DKDEPIMLIBS_VERSION_PATCH=${KdepimLibs_VERSION_PATCH} )
 
+#Tag::GENERIC is only available at the moment at the kolab/integration branches
+if (KDEPIMLIBS_HAS_GENERIC_TAG)
+    add_definitions( -DKDEPIMLIBS_HAS_GENERIC_TAG)
+endif()
+
 if("${KdepimLibs_VERSION}" VERSION_GREATER "4.8.40" OR USE_LIBCALENDARING)
     add_definitions(-DKDEPIMLIBS_VERSION_DEVEL)
 endif()
--- a/kolabformat/kolabobject.cpp
+++ b/kolabformat/kolabobject.cpp
@@ -435,8 +435,11 @@
                 mTag = Akonadi::Tag();
                 mTag.setName(Conversion::fromStdString(relation.name()));
                 mTag.setGid(Conversion::fromStdString(configuration.uid()).toLatin1());
+#ifdef KDEPIMLIBS_HAS_GENERIC_TAG
                 mTag.setType(Akonadi::Tag::GENERIC);
-
+#else
+                mTag.setType(Akonadi::Tag::PLAIN);
+#endif
                 mTagMembers.reserve(relation.members().size());
                 foreach (const std::string &member, relation.members()) {
                     mTagMembers << Conversion::fromStdString(member);
